#!/usr/bin/env python
"""
Prueba espec√≠fica para verificar la duplicaci√≥n de stock
Simula la creaci√≥n de un producto como lo har√≠a el formulario
"""

import os
import sys
import django
from datetime import date, timedelta

# Configurar Django
sys.path.append('c:\\Users\\Robinson Bravo\\Desktop\\bodega_seremi\\sistema_bodega')
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'sistema_bodega.settings')
django.setup()

from accounts.models import Producto, LoteProducto
from accounts.forms import ProductoForm

def probar_duplicacion():
    print("=" * 60)
    print("   PRUEBA DE DUPLICACI√ìN DE STOCK")
    print("=" * 60)
    print()
    
    # Datos de prueba
    datos_producto = {
        'descripcion': 'Producto Prueba Duplicaci√≥n',
        'stock': 500,  # Usuario ingresa 500
        'tiene_vencimiento': True,
        'fecha_vencimiento': date.today() + timedelta(days=30),
        'categoria': None
    }
    
    print("üß™ SIMULANDO CREACI√ìN DE PRODUCTO:")
    print(f"   ‚Ä¢ Descripci√≥n: {datos_producto['descripcion']}")
    print(f"   ‚Ä¢ Stock ingresado: {datos_producto['stock']}")
    print(f"   ‚Ä¢ Fecha vencimiento: {datos_producto['fecha_vencimiento']}")
    print()
    
    # Crear formulario y simular guardado
    form = ProductoForm(data=datos_producto)
    
    if form.is_valid():
        print("‚úÖ Formulario v√°lido")
        
        # Guardar producto
        producto = form.save()
        
        print(f"üì¶ RESULTADO DESPU√âS DEL GUARDADO:")
        print(f"   ‚Ä¢ C√≥digo: {producto.codigo_barra}")
        print(f"   ‚Ä¢ Stock en producto: {producto.stock}")
        
        # Verificar lotes
        lotes = producto.lotes.all()
        total_stock_lotes = sum(lote.stock for lote in lotes)
        
        print(f"   ‚Ä¢ Cantidad de lotes: {lotes.count()}")
        print(f"   ‚Ä¢ Stock total en lotes: {total_stock_lotes}")
        
        for lote in lotes:
            print(f"     - Lote {lote.numero_lote}: {lote.stock} unidades")
        
        print()
        
        # Verificar resultado
        if producto.stock == 500 and total_stock_lotes == 500:
            print("‚úÖ ¬°√âXITO! No hay duplicaci√≥n:")
            print("   ‚Ä¢ Stock producto = Stock lotes = 500")
            print("   ‚Ä¢ El problema de duplicaci√≥n est√° SOLUCIONADO")
        elif producto.stock == 1000 or total_stock_lotes == 1000:
            print("‚ùå PROBLEMA PERSISTE:")
            print(f"   ‚Ä¢ Se duplic√≥ el stock: esperado=500, obtenido={producto.stock}")
            print("   ‚Ä¢ Se requiere correcci√≥n adicional")
        else:
            print("‚ö†Ô∏è  RESULTADO INESPERADO:")
            print(f"   ‚Ä¢ Stock producto: {producto.stock}")
            print(f"   ‚Ä¢ Stock lotes: {total_stock_lotes}")
        
        # Limpiar (eliminar producto de prueba)
        producto.delete()
        print(f"\nüßπ Producto de prueba eliminado")
        
    else:
        print("‚ùå Error en formulario:")
        for field, errors in form.errors.items():
            print(f"   ‚Ä¢ {field}: {errors}")
    
    print()
    print("=" * 60)
    print("         PRUEBA COMPLETADA")
    print("=" * 60)

if __name__ == "__main__":
    probar_duplicacion()
