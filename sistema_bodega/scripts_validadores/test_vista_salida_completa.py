#!/usr/bin/env python
"""
Test espec√≠fico para simular las operaciones exactas de la vista de salida de productos.
Reproduce el flujo completo: sesi√≥n, AJAX, limpieza, etc.
"""
import os
import sys
import django
import json
from datetime import date, timedelta

# Configurar Django
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'sistema_bodega.settings')
django.setup()

from accounts.models import Producto, LoteProducto, Transaccion
from django.db import transaction
from django.core.serializers.json import DjangoJSONEncoder
from django.test import RequestFactory, Client
from django.contrib.sessions.middleware import SessionMiddleware
from django.contrib.auth.middleware import AuthenticationMiddleware
from django.contrib.auth import get_user_model
from django.http import JsonResponse

User = get_user_model()

def test_vista_salida_completa():
    """Test que simula exactamente la vista de salida de productos."""
    print("üéØ TEST VISTA SALIDA COMPLETA")
    print("=" * 50)
    
    try:
        with transaction.atomic():
            # 1. CREAR PRODUCTO CON M√öLTIPLES LOTES
            print("\n1Ô∏è‚É£ Creando producto con m√∫ltiples lotes...")
            
            producto = Producto.objects.create(
                codigo_barra='TESTVISTA001',
                descripcion='Tomates Vista Test',
                tiene_vencimiento=True,
                fecha_vencimiento=date.today() + timedelta(days=90),
                stock=0
            )
            
            # Crear 30 lotes
            stock_total = 0
            for i in range(30):
                cantidad = 50 + (i * 10)  # Cantidades incrementales
                lote = LoteProducto.objects.create(
                    producto=producto,
                    numero_lote=i+1,
                    fecha_vencimiento=date.today() + timedelta(days=30 + i*5),
                    stock=cantidad
                )
                stock_total += cantidad
            
            producto.stock = stock_total
            producto.save()
            
            print(f"‚úÖ Producto creado: {stock_total} unidades en {producto.lotes.count()} lotes")
            
            # 2. SIMULAR SESI√ìN CON PRODUCTOS_SALIDA
            print("\n2Ô∏è‚É£ Simulando sesi√≥n de productos_salida...")
            
            # Crear cliente y configurar sesi√≥n
            client = Client()
            session = client.session
            
            # Simular productos_salida en sesi√≥n
            productos_salida = []
            
            # 3. SIMULAR M√öLTIPLES SALIDAS HASTA AGOTAR STOCK
            print("\n3Ô∏è‚É£ Simulando salidas hasta agotar stock...")
            
            salida_numero = 1
            
            while producto.stock > 0:
                cantidad_salida = min(200, producto.stock)
                
                print(f"   Salida #{salida_numero}: {cantidad_salida} unidades")
                
                # Aplicar FIFO
                if not producto.reducir_stock_fifo(cantidad_salida):
                    print(f"‚ùå Error en FIFO")
                    break
                
                producto.refresh_from_db()
                
                # Simular agregado a productos_salida
                item_salida = {
                    'codigo_barra': producto.codigo_barra,
                    'descripcion': producto.descripcion,
                    'stock': producto.stock,
                    'cantidad_salida': cantidad_salida,
                    'tiene_vencimiento': producto.tiene_vencimiento,
                    'lotes_activos': producto.get_total_lotes_activos(),
                    'lotes_detalle': producto.get_lotes_detalle(),
                    'estadisticas': producto.get_estadisticas_lotes()
                }
                
                productos_salida.append(item_salida)
                
                # Simular serializaci√≥n de sesi√≥n (aqu√≠ puede fallar)
                try:
                    session_json = json.dumps(productos_salida, cls=DjangoJSONEncoder)
                    session['productos_salida'] = productos_salida
                    session.save()
                except Exception as e:
                    print(f"‚ùå ERROR SESI√ìN en salida #{salida_numero}: {e}")
                    print(f"   Stock actual: {producto.stock}")
                    print(f"   Lotes activos: {producto.get_total_lotes_activos()}")
                    
                    # Analizar el item problem√°tico
                    try:
                        json.dumps(item_salida, cls=DjangoJSONEncoder)
                    except Exception as e2:
                        print(f"   Error en item_salida: {e2}")
                        
                        # Verificar cada campo
                        for campo, valor in item_salida.items():
                            try:
                                json.dumps(valor, cls=DjangoJSONEncoder)
                            except Exception as e3:
                                print(f"     Campo problem√°tico '{campo}': {e3}")
                    
                    raise e
                
                # Simular respuesta AJAX
                try:
                    response_data = {
                        'status': 'success',
                        'productos_salida': productos_salida,
                        'total_productos': len(productos_salida),
                        'producto_actual': item_salida
                    }
                    
                    ajax_json = json.dumps(response_data, cls=DjangoJSONEncoder)
                    
                except Exception as e:
                    print(f"‚ùå ERROR AJAX en salida #{salida_numero}: {e}")
                    raise e
                
                salida_numero += 1
                
                if salida_numero > 100:  # Protecci√≥n
                    break
            
            # 4. SIMULAR LIMPIEZA FINAL DE SESI√ìN
            print(f"\n4Ô∏è‚É£ Simulando limpieza final de sesi√≥n...")
            
            try:
                # Verificar estado final del producto
                producto.refresh_from_db()
                
                final_data = {
                    'producto': {
                        'codigo_barra': producto.codigo_barra,
                        'descripcion': producto.descripcion,
                        'stock': producto.stock,
                        'lotes_activos': producto.get_total_lotes_activos(),
                        'total_lotes': producto.lotes.count(),
                        'lotes_detalle': producto.get_lotes_detalle(),
                        'estadisticas': producto.get_estadisticas_lotes()
                    },
                    'productos_salida': productos_salida
                }
                
                # Simular limpieza de sesi√≥n
                final_json = json.dumps(final_data, cls=DjangoJSONEncoder)
                
                # Limpiar sesi√≥n
                session.pop('productos_salida', None)
                session.save()
                
                print(f"‚úÖ Limpieza de sesi√≥n exitosa")
                
            except Exception as e:
                print(f"‚ùå ERROR LIMPIEZA: {e}")
                raise e
            
            # 5. VERIFICACIONES FINALES
            print(f"\n5Ô∏è‚É£ Verificaciones finales...")
            
            print(f"üìä Salidas realizadas: {salida_numero - 1}")
            print(f"üìä Stock final: {producto.stock}")
            print(f"üìä Lotes activos: {producto.get_total_lotes_activos()}")
            print(f"üìä Total lotes: {producto.lotes.count()}")
            print(f"üìä Items en productos_salida: {len(productos_salida)}")
            
            # Verificar cada item de productos_salida
            for i, item in enumerate(productos_salida):
                try:
                    json.dumps(item, cls=DjangoJSONEncoder)
                except Exception as e:
                    print(f"‚ùå Item {i} no serializable: {e}")
                    raise e
            
            # Limpiar
            producto.delete()
            print(f"\nüßπ Producto test eliminado")
            
    except Exception as e:
        print(f"\nüí• ERROR DETECTADO EN VISTA: {e}")
        import traceback
        traceback.print_exc()
        return False
    
    print(f"\n‚úÖ TEST VISTA COMPLETADO SIN ERRORES")
    return True

def test_condiciones_especificas():
    """Test para condiciones espec√≠ficas que pueden causar el error."""
    print("\nüîç TEST CONDICIONES ESPEC√çFICAS")
    print("=" * 50)
    
    try:
        with transaction.atomic():
            # Crear producto con condiciones espec√≠ficas
            producto = Producto.objects.create(
                codigo_barra='TESTCOND001',
                descripcion='Test Condiciones Espec√≠ficas',
                tiene_vencimiento=True,
                fecha_vencimiento=date.today() + timedelta(days=60),
                stock=0
            )
            
            # Crear lotes con fechas problem√°ticas
            print("üìÖ Creando lotes con fechas espec√≠ficas...")
            
            # Lote vencido
            LoteProducto.objects.create(
                producto=producto,
                numero_lote=1,
                fecha_vencimiento=date.today() - timedelta(days=5),
                stock=100
            )
            
            # Lote que vence hoy
            LoteProducto.objects.create(
                producto=producto,
                numero_lote=2,
                fecha_vencimiento=date.today(),
                stock=50
            )
            
            # Lote cr√≠tico (vence en 3 d√≠as)
            LoteProducto.objects.create(
                producto=producto,
                numero_lote=3,
                fecha_vencimiento=date.today() + timedelta(days=3),
                stock=75
            )
            
            producto.stock = 225
            producto.save()
            
            print(f"‚úÖ Producto creado con lotes problem√°ticos")
            
            # Probar serializaci√≥n en diferentes estados
            print("üß™ Probando serializaci√≥n en diferentes estados...")
            
            estados = [
                ("Estado inicial", producto.stock),
                ("Despu√©s de salida parcial", 150),
                ("Despu√©s de m√°s salidas", 50),
                ("Stock agotado", 0)
            ]
            
            for estado_desc, stock_objetivo in estados:
                if producto.stock > stock_objetivo:
                    cantidad_reducir = producto.stock - stock_objetivo
                    producto.reducir_stock_fifo(cantidad_reducir)
                    producto.refresh_from_db()
                
                print(f"  {estado_desc} (stock: {producto.stock})...")
                
                try:
                    # Datos t√≠picos de vista
                    datos_vista = {
                        'producto': {
                            'codigo_barra': producto.codigo_barra,
                            'descripcion': producto.descripcion,
                            'stock': producto.stock,
                            'tiene_vencimiento': producto.tiene_vencimiento,
                            'fecha_vencimiento': producto.fecha_vencimiento.isoformat() if producto.fecha_vencimiento else None,
                            'lotes_activos': producto.get_total_lotes_activos(),
                            'lotes_detalle': producto.get_lotes_detalle(),
                            'lotes_activos_detalle': producto.get_lotes_activos_detalle(),
                            'estadisticas': producto.get_estadisticas_lotes(),
                            'estado_vencimiento': producto.get_estado_vencimiento_completo(),
                            'proximo_vencimiento': producto.get_proximo_vencimiento().isoformat() if producto.get_proximo_vencimiento() else None
                        }
                    }
                    
                    # Serializar
                    json_string = json.dumps(datos_vista, cls=DjangoJSONEncoder)
                    
                    print(f"    ‚úÖ Serializaci√≥n OK")
                    
                except Exception as e:
                    print(f"    ‚ùå Error serializaci√≥n: {e}")
                    
                    # Probar cada campo individualmente
                    for campo, valor in datos_vista['producto'].items():
                        try:
                            json.dumps(valor, cls=DjangoJSONEncoder)
                        except Exception as e2:
                            print(f"      Campo problem√°tico '{campo}': {e2}")
                    
                    raise e
            
            # Limpiar
            producto.delete()
            
    except Exception as e:
        print(f"‚ùå Error en test de condiciones: {e}")
        return False
    
    return True

def main():
    """Ejecuta todos los tests de vista."""
    print("üéØ TESTS ESPEC√çFICOS DE VISTA DE SALIDA")
    print("=" * 60)
    
    # Test 1: Vista completa
    test1_ok = test_vista_salida_completa()
    
    # Test 2: Condiciones espec√≠ficas
    test2_ok = test_condiciones_especificas()
    
    # Resumen
    print("\n" + "=" * 60)
    print("üìä RESUMEN DE TESTS DE VISTA")
    print("=" * 60)
    print(f"Test 1 (Vista completa): {'‚úÖ PAS√ì' if test1_ok else '‚ùå FALL√ì'}")
    print(f"Test 2 (Condiciones espec√≠ficas): {'‚úÖ PAS√ì' if test2_ok else '‚ùå FALL√ì'}")
    
    if test1_ok and test2_ok:
        print("\n‚úÖ TODOS LOS TESTS DE VISTA PASARON")
        print("   No se detect√≥ el error de vista. El sistema est√° estable.")
    else:
        print("\n‚ùå ALGUNOS TESTS DE VISTA FALLARON")
        print("   Se detectaron errores en las vistas que requieren correcci√≥n.")
    
    print("=" * 60)

if __name__ == "__main__":
    main()
