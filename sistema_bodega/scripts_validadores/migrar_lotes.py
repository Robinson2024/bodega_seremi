#!/usr/bin/env python
"""
Script para migrar productos existentes al sistema de lotes autom√°tico.

Este script:
1. Identifica todos los productos con fecha de vencimiento que no tienen lotes
2. Crea autom√°ticamente un lote inicial para cada producto
3. Transfiere el stock existente al lote creado
4. Mantiene la integridad de los datos existentes

Ejecutar con: python migrar_lotes.py
"""
import os
import sys
import django
from datetime import date, timedelta

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'sistema_bodega.settings')
django.setup()

from accounts.models import Producto, LoteProducto

def migrar_productos_a_lotes():
    """Migra todos los productos con vencimiento al sistema de lotes."""
    print("=== INICIANDO MIGRACI√ìN DE PRODUCTOS A SISTEMA DE LOTES ===\n")
    
    # Obtener productos con vencimiento que no tienen lotes
    productos_con_vencimiento = Producto.objects.filter(
        tiene_vencimiento=True,
        fecha_vencimiento__isnull=False
    )
    
    productos_sin_lotes = []
    productos_con_lotes = []
    
    for producto in productos_con_vencimiento:
        if not producto.lotes.exists():
            productos_sin_lotes.append(producto)
        else:
            productos_con_lotes.append(producto)
    
    print(f"üìä ESTAD√çSTICAS INICIALES:")
    print(f"   ‚Ä¢ Total productos con vencimiento: {productos_con_vencimiento.count()}")
    print(f"   ‚Ä¢ Productos SIN lotes: {len(productos_sin_lotes)}")
    print(f"   ‚Ä¢ Productos CON lotes: {len(productos_con_lotes)}")
    print()
    
    if not productos_sin_lotes:
        print("‚úÖ Todos los productos con vencimiento ya tienen lotes asignados.")
        print("   No se requiere migraci√≥n.")
        return
    
    print(f"üîÑ INICIANDO MIGRACI√ìN DE {len(productos_sin_lotes)} PRODUCTOS...\n")
    
    productos_migrados = 0
    productos_con_errores = []
    
    for producto in productos_sin_lotes:
        try:
            print(f"‚è≥ Procesando: {producto.descripcion}")
            print(f"   ‚Ä¢ C√≥digo: {producto.codigo_barra}")
            print(f"   ‚Ä¢ Stock actual: {producto.stock}")
            print(f"   ‚Ä¢ Fecha vencimiento: {producto.fecha_vencimiento}")
            
            # Solo crear lote si tiene stock > 0
            if producto.stock > 0:
                # Crear el primer lote con numeraci√≥n autom√°tica
                lote = producto.crear_lote_automatico(
                    cantidad=producto.stock,
                    fecha_vencimiento=producto.fecha_vencimiento
                )
                
                print(f"   ‚úÖ Lote creado: #{lote.numero_lote} con {lote.stock} unidades")
                productos_migrados += 1
            else:
                print(f"   ‚ö†Ô∏è  Sin stock - No se crea lote")
                productos_migrados += 1
            
            print()
            
        except Exception as e:
            error_msg = f"Error migrando {producto.descripcion}: {str(e)}"
            print(f"   ‚ùå {error_msg}")
            productos_con_errores.append({
                'producto': producto,
                'error': str(e)
            })
            print()
    
    # Verificar integridad de datos despu√©s de la migraci√≥n
    print("üîç VERIFICANDO INTEGRIDAD DE DATOS...\n")
    
    productos_verificados = 0
    productos_con_problemas = []
    
    for producto in productos_con_vencimiento:
        if producto.tiene_vencimiento and producto.stock > 0:
            if not producto.lotes.filter(stock__gt=0).exists():
                productos_con_problemas.append(producto)
            else:
                # Verificar que el stock total coincida
                stock_lotes = sum(lote.stock for lote in producto.lotes.all())
                if stock_lotes != producto.stock:
                    productos_con_problemas.append(producto)
                    print(f"‚ö†Ô∏è  Stock inconsistente en {producto.descripcion}: Producto={producto.stock}, Lotes={stock_lotes}")
                else:
                    productos_verificados += 1
    
    # Mostrar resumen final
    print("="*60)
    print("üìã RESUMEN DE MIGRACI√ìN")
    print("="*60)
    print(f"‚úÖ Productos migrados exitosamente: {productos_migrados}")
    print(f"‚úÖ Productos verificados: {productos_verificados}")
    
    if productos_con_errores:
        print(f"‚ùå Productos con errores: {len(productos_con_errores)}")
        for error in productos_con_errores:
            print(f"   ‚Ä¢ {error['producto'].descripcion}: {error['error']}")
    
    if productos_con_problemas:
        print(f"‚ö†Ô∏è  Productos con problemas de integridad: {len(productos_con_problemas)}")
        for producto in productos_con_problemas:
            print(f"   ‚Ä¢ {producto.descripcion} ({producto.codigo_barra})")
    
    print("\nüéâ MIGRACI√ìN COMPLETADA")
    print("\nPr√≥ximos pasos:")
    print("1. Verificar que todos los productos tienen lotes correctos")
    print("2. Actualizar formularios para usar el sistema de lotes")
    print("3. Actualizar vistas para mostrar informaci√≥n de lotes")
    print("4. Probar el flujo completo de entrada y salida de stock")

def mostrar_estadisticas_lotes():
    """Muestra estad√≠sticas detalladas del sistema de lotes."""
    print("\n" + "="*60)
    print("üìä ESTAD√çSTICAS DEL SISTEMA DE LOTES")
    print("="*60)
    
    # Productos con y sin vencimiento
    total_productos = Producto.objects.all().count()
    productos_con_vencimiento = Producto.objects.filter(tiene_vencimiento=True).count()
    productos_sin_vencimiento = total_productos - productos_con_vencimiento
    
    print(f"üì¶ PRODUCTOS:")
    print(f"   ‚Ä¢ Total: {total_productos}")
    print(f"   ‚Ä¢ Con vencimiento: {productos_con_vencimiento}")
    print(f"   ‚Ä¢ Sin vencimiento: {productos_sin_vencimiento}")
    print()
    
    # Lotes por estado
    hoy = date.today()
    
    total_lotes = LoteProducto.objects.all().count()
    lotes_con_stock = LoteProducto.objects.filter(stock__gt=0).count()
    lotes_sin_stock = total_lotes - lotes_con_stock
    
    print(f"üìä LOTES:")
    print(f"   ‚Ä¢ Total lotes: {total_lotes}")
    print(f"   ‚Ä¢ Con stock: {lotes_con_stock}")
    print(f"   ‚Ä¢ Sin stock: {lotes_sin_stock}")
    print()
    
    # An√°lisis de vencimientos
    lotes_activos = LoteProducto.objects.filter(stock__gt=0)
    vencidos = lotes_activos.filter(fecha_vencimiento__lt=hoy).count()
    vencen_hoy = lotes_activos.filter(fecha_vencimiento=hoy).count()
    criticos = lotes_activos.filter(
        fecha_vencimiento__gt=hoy,
        fecha_vencimiento__lte=hoy + timedelta(days=7)
    ).count()
    
    print(f"‚ö†Ô∏è  AN√ÅLISIS DE VENCIMIENTOS (Lotes con stock):")
    print(f"   ‚Ä¢ Vencidos: {vencidos}")
    print(f"   ‚Ä¢ Vencen hoy: {vencen_hoy}")
    print(f"   ‚Ä¢ Cr√≠ticos (‚â§7 d√≠as): {criticos}")
    print()

def crear_productos_ejemplo():
    """Crea algunos productos de ejemplo para pruebas (opcional)."""
    print("\nüß™ ¬øQuieres crear productos de ejemplo para pruebas? (s/n): ", end="")
    try:
        respuesta = input().strip().lower()
    except (EOFError, KeyboardInterrupt):
        print("\nSaltando creaci√≥n de productos de ejemplo...")
        return
    
    if respuesta not in ['s', 'si', 'y', 'yes']:
        return
    
    ejemplos = [
        {
            'codigo_barra': 'TEST001',
            'descripcion': 'Alcohol Gel 500ml (EJEMPLO)',
            'stock': 25,
            'fecha_vencimiento': date.today() + timedelta(days=15),  # Vence en 15 d√≠as (cr√≠tico)
        },
        {
            'codigo_barra': 'TEST002',
            'descripcion': 'Mascarillas N95 (EJEMPLO)',
            'stock': 100,
            'fecha_vencimiento': date.today() + timedelta(days=3),   # Vence en 3 d√≠as (cr√≠tico)
        },
        {
            'codigo_barra': 'TEST003',
            'descripcion': 'Guantes Nitrilo (EJEMPLO)',
            'stock': 50,
            'fecha_vencimiento': date.today() + timedelta(days=60),  # Vence en 60 d√≠as (normal)
        }
    ]
    
    print("\nüîÑ Creando productos de ejemplo...")
    for ejemplo in ejemplos:
        try:
            producto, created = Producto.objects.get_or_create(
                codigo_barra=ejemplo['codigo_barra'],
                defaults={
                    'descripcion': ejemplo['descripcion'],
                    'stock': ejemplo['stock'],
                    'tiene_vencimiento': True,
                    'fecha_vencimiento': ejemplo['fecha_vencimiento']
                }
            )
            
            if created:
                # Crear lote autom√°ticamente
                lote = producto.crear_lote_automatico(
                    cantidad=ejemplo['stock'],
                    fecha_vencimiento=ejemplo['fecha_vencimiento']
                )
                print(f"‚úÖ Producto ejemplo creado: {producto.descripcion} (Lote {lote.numero_lote})")
            else:
                print(f"‚ö†Ô∏è  Producto ejemplo ya existe: {producto.descripcion}")
                
        except Exception as e:
            print(f"‚ùå Error al crear producto ejemplo {ejemplo['descripcion']}: {e}")

def main():
    """Funci√≥n principal del script de migraci√≥n."""
    print("üöÄ MIGRACI√ìN AL SISTEMA DE LOTES AUTOM√ÅTICOS")
    print("=" * 50)
    
    try:
        # Paso 1: Migrar productos existentes
        migrar_productos_a_lotes()
        
        # Paso 2: Mostrar estad√≠sticas
        mostrar_estadisticas_lotes()
        
        # Paso 3: Crear productos de ejemplo (opcional)
        crear_productos_ejemplo()
        
        print("\n" + "=" * 50)
        print("üéâ ¬°PROCESO COMPLETADO EXITOSAMENTE!")
        print("   El sistema de lotes autom√°ticos est√° listo para usar.")
        
    except KeyboardInterrupt:
        print("\n‚ùå Proceso cancelado por el usuario.")
        return False
    except Exception as e:
        print(f"\n‚ùå Error durante el proceso: {e}")
        import traceback
        traceback.print_exc()
        return False
    
    return True

if __name__ == "__main__":
    main()
