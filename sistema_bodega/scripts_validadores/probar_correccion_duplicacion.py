#!/usr/bin/env python
"""
Prueba espec√≠fica de correcci√≥n de duplicaci√≥n en productos existentes
Simula el proceso completo de agregar stock usando el formulario corregido
"""

import os
import sys
import django
from datetime import date, timedelta

# Configurar Django
sys.path.append('c:\\Users\\Robinson Bravo\\Desktop\\bodega_seremi\\sistema_bodega')
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'sistema_bodega.settings')
django.setup()

from accounts.models import Producto, LoteProducto, Transaccion
from accounts.forms import AgregarStockConVencimientoForm
from django.db import models

def probar_correccion_duplicacion():
    print("=" * 70)
    print("   PRUEBA DE CORRECCI√ìN - AGREGAR STOCK SIN DUPLICACI√ìN")
    print("=" * 70)
    print()
    
    # Verificar si ya existe el producto 100047
    try:
        producto = Producto.objects.get(codigo_barra='100047')
        print(f"üì¶ USANDO PRODUCTO EXISTENTE:")
        print(f"   ‚Ä¢ C√≥digo: {producto.codigo_barra}")
        print(f"   ‚Ä¢ Descripci√≥n: {producto.descripcion}")
        print(f"   ‚Ä¢ Stock antes: {producto.stock}")
        
        stock_antes = producto.stock
        total_lotes_antes = producto.lotes.aggregate(total=models.Sum('stock'))['total'] or 0
        print(f"   ‚Ä¢ Stock en lotes antes: {total_lotes_antes}")
        
    except Producto.DoesNotExist:
        print("‚ùå Producto 100047 no encontrado. Creando producto para prueba...")
        producto = Producto.objects.create(
            descripcion='Producto Prueba Stock',
            stock=0,
            tiene_vencimiento=True,
            fecha_vencimiento=date.today() + timedelta(days=30)
        )
        stock_antes = 0
        total_lotes_antes = 0
    
    print()
    
    # Simular datos del formulario (usuario quiere agregar 500 unidades)
    cantidad_a_agregar = 500
    datos_formulario = {
        'cantidad': cantidad_a_agregar,
        'tiene_vencimiento_nuevo': True,
        'fecha_vencimiento': date.today() + timedelta(days=45),
        'rut_proveedor': '12345678-9',
        'guia_despacho': 'GD-001',
        'numero_factura': 'F-001',
        'orden_compra': 'OC-001'
    }
    
    print(f"üß™ SIMULANDO AGREGAR STOCK:")
    print(f"   ‚Ä¢ Cantidad a agregar: {cantidad_a_agregar}")
    print(f"   ‚Ä¢ Fecha vencimiento: {datos_formulario['fecha_vencimiento']}")
    print()
    
    # Contar transacciones antes
    transacciones_antes = Transaccion.objects.filter(producto=producto).count()
    
    # Procesar formulario
    form = AgregarStockConVencimientoForm(data=datos_formulario, producto=producto)
    
    if form.is_valid():
        print("‚úÖ Formulario v√°lido. Agregando stock...")
        
        # Ejecutar el m√©todo que agrega stock
        lote, transaccion = form.agregar_stock_a_producto(producto)
        
        # Verificar resultados
        producto.refresh_from_db()
        stock_despues = producto.stock
        total_lotes_despues = producto.lotes.aggregate(total=models.Sum('stock'))['total'] or 0
        transacciones_despues = Transaccion.objects.filter(producto=producto).count()
        
        print(f"\nüìä RESULTADOS:")
        print(f"   ‚Ä¢ Stock antes: {stock_antes}")
        print(f"   ‚Ä¢ Stock despu√©s: {stock_despues}")
        print(f"   ‚Ä¢ Incremento real: {stock_despues - stock_antes}")
        print(f"   ‚Ä¢ Incremento esperado: {cantidad_a_agregar}")
        print()
        print(f"   ‚Ä¢ Lotes antes: {total_lotes_antes}")
        print(f"   ‚Ä¢ Lotes despu√©s: {total_lotes_despues}")
        print(f"   ‚Ä¢ Incremento lotes: {total_lotes_despues - total_lotes_antes}")
        print()
        print(f"   ‚Ä¢ Transacciones antes: {transacciones_antes}")
        print(f"   ‚Ä¢ Transacciones despu√©s: {transacciones_despues}")
        
        # Verificar transacci√≥n creada
        if transaccion:
            print(f"   ‚Ä¢ Transacci√≥n registrada: {transaccion.cantidad} unidades")
        
        # An√°lisis final
        print(f"\nüéØ AN√ÅLISIS:")
        
        incremento_correcto = (stock_despues - stock_antes) == cantidad_a_agregar
        lotes_consistentes = stock_despues == total_lotes_despues
        transaccion_correcta = transaccion and transaccion.cantidad == cantidad_a_agregar
        
        if incremento_correcto and lotes_consistentes and transaccion_correcta:
            print("   ‚úÖ ¬°PERFECTO! Correcci√≥n exitosa:")
            print("      ‚Ä¢ Stock se increment√≥ exactamente por la cantidad ingresada")
            print("      ‚Ä¢ Stock producto = Stock lotes")
            print("      ‚Ä¢ Transacci√≥n registra la cantidad correcta")
            print("      ‚Ä¢ NO HAY DUPLICACI√ìN")
        else:
            print("   ‚ùå A√∫n hay problemas:")
            if not incremento_correcto:
                print(f"      ‚Ä¢ Stock duplicado: esperado +{cantidad_a_agregar}, obtenido +{stock_despues - stock_antes}")
            if not lotes_consistentes:
                print(f"      ‚Ä¢ Inconsistencia: Stock={stock_despues}, Lotes={total_lotes_despues}")
            if not transaccion_correcta:
                cantidad_trans = transaccion.cantidad if transaccion else 0
                print(f"      ‚Ä¢ Transacci√≥n incorrecta: esperado {cantidad_a_agregar}, registrado {cantidad_trans}")
        
        # Mostrar lotes actuales
        print(f"\nüìã LOTES ACTUALES:")
        lotes = producto.lotes.all().order_by('numero_lote')
        for lote in lotes:
            print(f"   ‚Ä¢ Lote {lote.numero_lote}: {lote.stock} unidades, vence {lote.fecha_vencimiento}")
            
    else:
        print("‚ùå Error en formulario:")
        for field, errors in form.errors.items():
            print(f"   ‚Ä¢ {field}: {errors}")
    
    print()
    print("=" * 70)
    print("                    PRUEBA COMPLETADA")
    print("=" * 70)

if __name__ == "__main__":
    probar_correccion_duplicacion()
