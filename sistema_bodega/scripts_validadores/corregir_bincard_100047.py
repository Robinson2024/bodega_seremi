#!/usr/bin/env python
"""
Correcci√≥n espec√≠fica del Bincard del producto 100047
Corrige la transacci√≥n duplicada para que coincida con el stock real
"""

import os
import sys
import django
from datetime import datetime

# Configurar Django
sys.path.append('c:\\Users\\Robinson Bravo\\Desktop\\bodega_seremi\\sistema_bodega')
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'sistema_bodega.settings')
django.setup()

from accounts.models import Producto, LoteProducto, Transaccion
from django.db import models, transaction

def corregir_bincard_100047():
    print("=" * 70)
    print("   CORRECCI√ìN DEL BINCARD - PRODUCTO 100047")
    print("=" * 70)
    print()
    
    try:
        producto = Producto.objects.get(codigo_barra='100047')
        print(f"üì¶ PRODUCTO: {producto.descripcion}")
        print(f"   ‚Ä¢ Stock actual: {producto.stock}")
        
        # Analizar situaci√≥n actual
        lotes = producto.lotes.all().order_by('numero_lote')
        total_stock_lotes = sum(lote.stock for lote in lotes)
        
        print(f"\nüìã ESTADO ACTUAL:")
        print(f"   ‚Ä¢ Stock en producto: {producto.stock}")
        print(f"   ‚Ä¢ Stock en lotes: {total_stock_lotes}")
        print(f"   ‚Ä¢ Lotes actuales:")
        for lote in lotes:
            print(f"     - Lote {lote.numero_lote}: {lote.stock} unidades")
        
        # Analizar transacciones
        transacciones = Transaccion.objects.filter(producto=producto).order_by('fecha')
        total_entradas_bincard = sum(t.cantidad for t in transacciones if t.tipo == 'entrada')
        
        print(f"\nüìä TRANSACCIONES ACTUALES:")
        print(f"   ‚Ä¢ Total transacciones: {transacciones.count()}")
        print(f"   ‚Ä¢ Total entradas en Bincard: {total_entradas_bincard}")
        print()
        
        for i, trans in enumerate(transacciones, 1):
            tipo_icon = "üì•" if trans.tipo == "entrada" else "üì§"
            print(f"   {i}. {tipo_icon} {trans.fecha.strftime('%Y-%m-%d %H:%M')}: {trans.cantidad} unidades")
        
        # Verificar discrepancia
        discrepancia = total_entradas_bincard - producto.stock
        
        print(f"\nüîç AN√ÅLISIS DE DISCREPANCIA:")
        print(f"   ‚Ä¢ Stock real: {producto.stock}")
        print(f"   ‚Ä¢ Total Bincard: {total_entradas_bincard}")
        print(f"   ‚Ä¢ Discrepancia: {discrepancia}")
        
        if discrepancia > 0:
            print(f"\nüîß APLICANDO CORRECCI√ìN:")
            print(f"   ‚Ä¢ Se detecta entrada duplicada de {discrepancia} unidades")
            
            # Buscar la transacci√≥n problem√°tica (la primera entrada con 1000)
            primera_entrada = transacciones.filter(tipo='entrada').first()
            
            if primera_entrada and primera_entrada.cantidad == 1000:
                print(f"   ‚Ä¢ Transacci√≥n problem√°tica: {primera_entrada.fecha} - {primera_entrada.cantidad} unidades")
                
                # Calcular la cantidad correcta
                cantidad_correcta = primera_entrada.cantidad - discrepancia
                
                print(f"   ‚Ä¢ Cantidad actual: {primera_entrada.cantidad}")
                print(f"   ‚Ä¢ Cantidad correcta: {cantidad_correcta}")
                
                # Aplicar correcci√≥n
                confirmar = input(f"\n¬øConfirmar correcci√≥n de {primera_entrada.cantidad} ‚Üí {cantidad_correcta}? (s/n): ")
                
                if confirmar.lower() == 's':
                    with transaction.atomic():
                        primera_entrada.cantidad = cantidad_correcta
                        primera_entrada.observacion = f"Corregido: era {primera_entrada.cantidad + discrepancia}, ajustado a {cantidad_correcta}"
                        primera_entrada.save()
                        
                        print(f"   ‚úÖ Transacci√≥n corregida exitosamente")
                        
                        # Verificar resultado
                        transacciones_actualizadas = Transaccion.objects.filter(producto=producto)
                        nuevo_total = sum(t.cantidad for t in transacciones_actualizadas if t.tipo == 'entrada')
                        
                        print(f"\nüìä RESULTADO:")
                        print(f"   ‚Ä¢ Nuevo total Bincard: {nuevo_total}")
                        print(f"   ‚Ä¢ Stock real: {producto.stock}")
                        
                        if nuevo_total == producto.stock:
                            print(f"   ‚úÖ ¬°PERFECTO! Bincard sincronizado con stock real")
                        else:
                            print(f"   ‚ö†Ô∏è  A√∫n hay discrepancia: {nuevo_total - producto.stock}")
                else:
                    print("   ‚ùå Correcci√≥n cancelada")
            else:
                print("   ‚ö†Ô∏è  No se encontr√≥ la transacci√≥n problem√°tica esperada")
        else:
            print("   ‚úÖ No hay discrepancias - Bincard est√° correcto")
        
    except Producto.DoesNotExist:
        print("‚ùå Producto 100047 no encontrado")
    
    print()
    print("=" * 70)
    print("              CORRECCI√ìN COMPLETADA")
    print("=" * 70)

if __name__ == "__main__":
    corregir_bincard_100047()
