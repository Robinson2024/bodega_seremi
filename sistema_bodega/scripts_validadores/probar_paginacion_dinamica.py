#!/usr/bin/env python
"""
Script de prueba para verificar la paginaci√≥n din√°mica
en la vista de control de vencimientos
"""

import os
import sys
import django
from datetime import date, timedelta

# Configurar Django
sys.path.append('c:\\Users\\Robinson Bravo\\Desktop\\bodega_seremi\\sistema_bodega')
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'sistema_bodega.settings')
django.setup()

from accounts.models import Producto, LoteProducto
from django.test import RequestFactory
from django.contrib.auth.models import User
from accounts.views import paginar_resultados_dinamico

def probar_paginacion_dinamica():
    print("=" * 80)
    print("        PRUEBA DE PAGINACI√ìN DIN√ÅMICA")
    print("     Control de Vencimientos - Numeraci√≥n Limitada")
    print("=" * 80)
    print()
    
    # Crear una request factory para simular requests
    factory = RequestFactory()
    
    # Obtener productos existentes
    productos = list(Producto.objects.filter(tiene_vencimiento=True))
    total_productos = len(productos)
    
    print(f"üìä DATOS INICIALES:")
    print(f"   ‚Ä¢ Total productos con vencimiento: {total_productos}")
    print()
    
    # Probar diferentes escenarios de paginaci√≥n
    scenarios = [
        {'items_per_page': 5, 'page': 1, 'description': 'Primera p√°gina, 5 items por p√°gina'},
        {'items_per_page': 5, 'page': 3, 'description': 'P√°gina central, 5 items por p√°gina'},
        {'items_per_page': 3, 'page': 1, 'description': 'Primera p√°gina, 3 items por p√°gina'},
        {'items_per_page': 2, 'page': 5, 'description': 'P√°gina 5, 2 items por p√°gina'},
        {'items_per_page': 10, 'page': 1, 'description': 'Primera p√°gina, 10 items por p√°gina'},
    ]
    
    for i, scenario in enumerate(scenarios, 1):
        print(f"üß™ ESCENARIO {i}: {scenario['description']}")
        
        # Crear request simulada
        request = factory.get(f"/?page={scenario['page']}")
        
        # Probar la funci√≥n de paginaci√≥n
        try:
            paginated = paginar_resultados_dinamico(
                request, 
                productos, 
                scenario['items_per_page']
            )
            
            print(f"   üìÑ P√°gina actual: {paginated.number}")
            print(f"   üìä Total p√°ginas: {paginated.paginator.num_pages}")
            print(f"   üì¶ Items en esta p√°gina: {len(paginated.object_list)}")
            print(f"   üî¢ Rango de p√°ginas din√°mico: {paginated.dynamic_page_range}")
            print(f"   ‚¨ÖÔ∏è  Mostrar primera/√∫ltima: {paginated.show_first_last}")
            print(f"   ... Puntos suspensivos inicial: {paginated.show_first_ellipsis}")
            print(f"   ... Puntos suspensivos final: {paginated.show_last_ellipsis}")
            
            # Verificar que el rango no sea excesivo
            range_size = len(paginated.dynamic_page_range)
            if range_size <= 10:
                print(f"   ‚úÖ Rango de p√°ginas OK ({range_size} p√°ginas mostradas)")
            else:
                print(f"   ‚ö†Ô∏è  Rango muy largo ({range_size} p√°ginas)")
            
        except Exception as e:
            print(f"   ‚ùå Error: {e}")
        
        print()
    
    # Probar con muchos productos (simular base de datos poblada)
    print("üîç SIMULACI√ìN CON MUCHOS PRODUCTOS:")
    
    # Crear lista de productos simulados
    productos_simulados = []
    for i in range(1, 201):  # 200 productos simulados
        productos_simulados.append({
            'id': i,
            'codigo': f'PROD{i:03d}',
            'descripcion': f'Producto simulado {i}'
        })
    
    # Probar con diferentes p√°ginas
    test_pages = [1, 5, 10, 15, 20]
    
    for page in test_pages:
        request = factory.get(f"/?page={page}")
        try:
            paginated = paginar_resultados_dinamico(request, productos_simulados, 10)
            
            print(f"   üìÑ P√°gina {page}:")
            print(f"      ‚Ä¢ Rango mostrado: {paginated.dynamic_page_range}")
            print(f"      ‚Ä¢ Tama√±o del rango: {len(paginated.dynamic_page_range)} p√°ginas")
            print(f"      ‚Ä¢ Puntos suspensivos: Inicio={paginated.show_first_ellipsis}, Fin={paginated.show_last_ellipsis}")
            
        except Exception as e:
            print(f"      ‚ùå Error en p√°gina {page}: {e}")
    
    print()
    
    # Resultado final
    print("=" * 80)
    print("                    RESULTADO DE LA PRUEBA")
    print("=" * 80)
    print("‚úÖ FUNCIONALIDAD IMPLEMENTADA:")
    print("   ‚Ä¢ Paginaci√≥n din√°mica con rango limitado")
    print("   ‚Ä¢ M√°ximo 10 p√°ginas mostradas simult√°neamente")
    print("   ‚Ä¢ Puntos suspensivos para p√°ginas no mostradas")
    print("   ‚Ä¢ Botones de primera/√∫ltima p√°gina cuando necesario")
    print("   ‚Ä¢ Navegaci√≥n anterior/siguiente siempre disponible")
    print()
    print("üéØ BENEFICIOS:")
    print("   ‚Ä¢ Interfaz limpia sin sobrecarga visual")
    print("   ‚Ä¢ Navegaci√≥n eficiente incluso con miles de productos")
    print("   ‚Ä¢ Experiencia de usuario mejorada")
    print("   ‚Ä¢ Responsive y accesible")
    print()
    print("üìù PARA PROBAR EN EL NAVEGADOR:")
    print("   1. Ir a: http://127.0.0.1:8000/accounts/control-vencimientos/")
    print("   2. Agregar productos para tener m√∫ltiples p√°ginas")
    print("   3. Verificar que solo se muestren p√°ginas limitadas")
    print("   4. Probar navegaci√≥n en diferentes dispositivos")
    print()
    print("=" * 80)

if __name__ == "__main__":
    probar_paginacion_dinamica()
