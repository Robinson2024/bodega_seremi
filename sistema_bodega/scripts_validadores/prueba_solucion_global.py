#!/usr/bin/env python
"""
PRUEBA DE APLICACI√ìN GLOBAL DE LA SOLUCI√ìN
Prueba que la correcci√≥n funcione para productos NUEVOS
No solo para el 100047, sino para cualquier producto que se agregue
"""

import os
import sys
import django
from datetime import date, timedelta

# Configurar Django
sys.path.append('c:\\Users\\Robinson Bravo\\Desktop\\bodega_seremi\\sistema_bodega')
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'sistema_bodega.settings')
django.setup()

from accounts.models import Producto, LoteProducto, Transaccion
from accounts.forms import ProductoForm, AgregarStockConVencimientoForm
from django.db import models, transaction

def probar_solucion_global():
    print("=" * 80)
    print("         PRUEBA DE APLICACI√ìN GLOBAL DE LA SOLUCI√ìN")
    print("    VERIFICANDO QUE LA CORRECCI√ìN FUNCIONE PARA PRODUCTOS NUEVOS")
    print("=" * 80)
    print()
    
    productos_prueba = []
    
    print("üß™ PRUEBA 1: CREAR PRODUCTO NUEVO CON VENCIMIENTO")
    print("-" * 50)
    
    # Datos para producto nuevo
    datos_producto_nuevo = {
        'descripcion': 'Producto Prueba Global 1',
        'stock': 300,  # Usuario ingresa 300
        'tiene_vencimiento': True,
        'fecha_vencimiento': date.today() + timedelta(days=60),
        'categoria': None
    }
    
    print(f"   üìù Datos del producto:")
    print(f"      ‚Ä¢ Descripci√≥n: {datos_producto_nuevo['descripcion']}")
    print(f"      ‚Ä¢ Stock ingresado: {datos_producto_nuevo['stock']}")
    print(f"      ‚Ä¢ Fecha vencimiento: {datos_producto_nuevo['fecha_vencimiento']}")
    
    try:
        # Crear usando el formulario corregido
        form = ProductoForm(data=datos_producto_nuevo)
        if form.is_valid():
            producto = form.save()
            productos_prueba.append(producto)
            
            print(f"\n   üìä RESULTADO PRODUCTO NUEVO:")
            print(f"      ‚Ä¢ C√≥digo asignado: {producto.codigo_barra}")
            print(f"      ‚Ä¢ Stock final: {producto.stock}")
            
            # Verificar lotes
            lotes = producto.lotes.all()
            total_lotes = sum(lote.stock for lote in lotes)
            print(f"      ‚Ä¢ Stock en lotes: {total_lotes}")
            print(f"      ‚Ä¢ Cantidad de lotes: {lotes.count()}")
            
            # Verificar transacciones
            transacciones = Transaccion.objects.filter(producto=producto)
            print(f"      ‚Ä¢ Transacciones creadas: {transacciones.count()}")
            
            # An√°lisis
            if producto.stock == 300 and total_lotes == 300:
                print(f"      ‚úÖ PERFECTO: No hay duplicaci√≥n en producto nuevo")
            else:
                print(f"      ‚ùå PROBLEMA: Stock={producto.stock}, Lotes={total_lotes}")
        else:
            print(f"      ‚ùå Error en formulario: {form.errors}")
    except Exception as e:
        print(f"      ‚ùå Error: {e}")
    
    print()
    print("üß™ PRUEBA 2: AGREGAR STOCK A PRODUCTO EXISTENTE")
    print("-" * 50)
    
    # Seleccionar un producto existente (diferente al 100047)
    producto_existente = Producto.objects.filter(
        tiene_vencimiento=True
    ).exclude(codigo_barra='100047').first()
    
    if producto_existente:
        stock_antes = producto_existente.stock
        lotes_antes = producto_existente.lotes.aggregate(total=models.Sum('stock'))['total'] or 0
        transacciones_antes = Transaccion.objects.filter(producto=producto_existente).count()
        
        print(f"   üìù Producto seleccionado: {producto_existente.descripcion} ({producto_existente.codigo_barra})")
        print(f"      ‚Ä¢ Stock antes: {stock_antes}")
        print(f"      ‚Ä¢ Lotes antes: {lotes_antes}")
        print(f"      ‚Ä¢ Transacciones antes: {transacciones_antes}")
        
        # Datos para agregar stock
        cantidad_agregar = 250
        datos_agregar = {
            'cantidad': cantidad_agregar,
            'tiene_vencimiento_nuevo': True,
            'fecha_vencimiento': date.today() + timedelta(days=45),
            'rut_proveedor': '98765432-1',
            'guia_despacho': 'GD-PRUEBA',
        }
        
        print(f"      ‚Ä¢ Cantidad a agregar: {cantidad_agregar}")
        
        try:
            # Usar formulario corregido para agregar stock
            form = AgregarStockConVencimientoForm(data=datos_agregar, producto=producto_existente)
            if form.is_valid():
                lote, transaccion = form.agregar_stock_a_producto(producto_existente)
                
                # Refrescar datos
                producto_existente.refresh_from_db()
                stock_despues = producto_existente.stock
                lotes_despues = producto_existente.lotes.aggregate(total=models.Sum('stock'))['total'] or 0
                transacciones_despues = Transaccion.objects.filter(producto=producto_existente).count()
                
                print(f"\n   üìä RESULTADO AGREGAR STOCK:")
                print(f"      ‚Ä¢ Stock despu√©s: {stock_despues}")
                print(f"      ‚Ä¢ Incremento real: {stock_despues - stock_antes}")
                print(f"      ‚Ä¢ Incremento esperado: {cantidad_agregar}")
                print(f"      ‚Ä¢ Lotes despu√©s: {lotes_despues}")
                print(f"      ‚Ä¢ Transacciones despu√©s: {transacciones_despues}")
                
                # An√°lisis
                incremento_correcto = (stock_despues - stock_antes) == cantidad_agregar
                consistencia_lotes = stock_despues == lotes_despues
                transaccion_creada = transacciones_despues == (transacciones_antes + 1)
                
                if incremento_correcto and consistencia_lotes and transaccion_creada:
                    print(f"      ‚úÖ PERFECTO: Agregar stock funciona correctamente")
                else:
                    print(f"      ‚ùå PROBLEMA DETECTADO:")
                    if not incremento_correcto:
                        print(f"         ‚Ä¢ Incremento incorrecto")
                    if not consistencia_lotes:
                        print(f"         ‚Ä¢ Inconsistencia en lotes")
                    if not transaccion_creada:
                        print(f"         ‚Ä¢ Problema en transacciones")
            else:
                print(f"      ‚ùå Error en formulario: {form.errors}")
        except Exception as e:
            print(f"      ‚ùå Error: {e}")
    else:
        print("      ‚ö†Ô∏è  No se encontr√≥ producto existente para prueba")
    
    print()
    print("üß™ PRUEBA 3: VERIFICAR QUE NO HAYA DUPLICACIONES EN EL SISTEMA")
    print("-" * 50)
    
    # Verificar todo el sistema despu√©s de las pruebas
    total_productos = Producto.objects.count()
    productos_inconsistentes = 0
    productos_bincard_mal = 0
    
    for producto in Producto.objects.filter(tiene_vencimiento=True):
        # Verificar stock vs lotes
        stock_lotes = producto.lotes.aggregate(total=models.Sum('stock'))['total'] or 0
        if producto.stock != stock_lotes:
            productos_inconsistentes += 1
        
        # Verificar stock vs bincard
        transacciones = Transaccion.objects.filter(producto=producto)
        if transacciones.exists():
            total_entradas = sum(t.cantidad for t in transacciones.filter(tipo='entrada'))
            total_salidas = sum(t.cantidad for t in transacciones.filter(tipo='salida'))
            saldo_bincard = total_entradas - total_salidas
            
            if saldo_bincard != producto.stock:
                productos_bincard_mal += 1
    
    print(f"   üìä VERIFICACI√ìN FINAL DEL SISTEMA:")
    print(f"      ‚Ä¢ Total productos: {total_productos}")
    print(f"      ‚Ä¢ Productos con inconsistencia Stock vs Lotes: {productos_inconsistentes}")
    print(f"      ‚Ä¢ Productos con discrepancia Bincard: {productos_bincard_mal}")
    
    if productos_inconsistentes == 0 and productos_bincard_mal == 0:
        print(f"      ‚úÖ TODO EL SISTEMA EST√Å CONSISTENTE")
    else:
        print(f"      ‚ö†Ô∏è  Se detectaron {productos_inconsistentes + productos_bincard_mal} problemas")
    
    # 4. LIMPIEZA DE PRODUCTOS DE PRUEBA
    print()
    print("üßπ LIMPIEZA DE PRODUCTOS DE PRUEBA:")
    print("-" * 50)
    
    for producto in productos_prueba:
        print(f"   üóëÔ∏è  Eliminando producto de prueba: {producto.codigo_barra}")
        producto.delete()
    
    print()
    print("üí° CONCLUSI√ìN FINAL:")
    print("-" * 50)
    
    if productos_inconsistentes == 0 and productos_bincard_mal == 0:
        print("   üéâ ¬°EXCELENTE! LA SOLUCI√ìN SE APLICA GLOBALMENTE:")
        print("      ‚úÖ Productos nuevos: Sin duplicaci√≥n")
        print("      ‚úÖ Agregar stock: Funciona correctamente") 
        print("      ‚úÖ Todo el sistema: Consistente")
        print("      ‚úÖ LA CORRECCI√ìN ES EFECTIVA PARA TODO EL SISTEMA")
    else:
        print("   ‚ö†Ô∏è  SE DETECTARON PROBLEMAS:")
        print("      ‚Üí La soluci√≥n necesita ajustes adicionales")
        print("      ‚Üí Revisar productos espec√≠ficos con problemas")
    
    print()
    print("=" * 80)
    print("                   PRUEBA GLOBAL COMPLETADA")
    print("=" * 80)

if __name__ == "__main__":
    probar_solucion_global()
